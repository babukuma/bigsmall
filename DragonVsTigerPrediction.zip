**index.html**
```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dragon vs Tiger Prediction</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f4f4f4;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
        }
        .container {
            background: white;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            text-align: center;
        }
        h1 {
            color: #333;
        }
        input, button {
            padding: 10px;
            margin: 10px;
            font-size: 16px;
        }
        button {
            background-color: #28a745;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }
        button:hover {
            background-color: #218838;
        }
        #result {
            margin-top: 20px;
            font-weight: bold;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Dragon vs Tiger Prediction</h1>
        <input type="text" id="history" placeholder="Enter last 10 results (e.g., D,T,D,D,T,...)">
        <button onclick="predict()">Predict</button>
        <div id="result"></div>
    </div>

    <script>
        async function predict() {
            const history = document.getElementById('history').value;
            if (!history) {
                document.getElementById('result').innerText = 'Please enter the last 10 results.';
                return;
            }

            try {
                const response = await fetch('http://localhost:5000/predict', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ history: history.split(',') })
                });
                const data = await response.json();
                document.getElementById('result').innerText = 
                    `Prediction: ${data.prediction} (Probability: ${(data.probability * 100).toFixed(2)}%)`;
            } catch (error) {
                document.getElementById('result').innerText = 'Error: Could not connect to server.';
                console.error(error);
            }
        }
    </script>
</body>
</html>
```

**app.py**
```python
import numpy as np
from flask import Flask, request, jsonify
import tensorflow as tf
from sklearn.preprocessing import LabelEncoder
import logging

app = Flask(__name__)

# Set up logging
logging.basicConfig(level=logging.INFO)

# Load or create the model
def create_model():
    model = tf.keras.Sequential([
        tf.keras.layers.Dense(64, activation='relu', input_shape=(10,)),
        tf.keras.layers.Dense(32, activation='relu'),
        tf.keras.layers.Dense(1, activation='sigmoid')
    ])
    model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])
    return model

# Initialize model and label encoder
model = create_model()
le = LabelEncoder()

# Example training data (replace with real historical data)
def load_training_data():
    # Simulated historical data: 'D' for Dragon, 'T' for Tiger
    # In a real scenario, load from a database or CSV file
    historical_data = [
        ['D', 'T', 'D', 'D', 'T', 'D', 'T', 'D', 'T', 'D', 'T'],
        ['T', 'D', 'T', 'T', 'D', 'T', 'D', 'T', 'D', 'T', 'D'],
        # Add more data here (at least 1000 samples recommended)
    ]
    X = []
    y = []
    for sequence in historical_data:
        X.append(sequence[:-1])  # Use first 10 results as input
        y.append(sequence[-1])   # Last result as target
    X = np.array([le.fit_transform(seq) for seq in X])
    y = le.transform(y)
    return X, y

# Train the model
X, y = load_training_data()
if len(X) > 0:
    model.fit(X, y, epochs=50, batch_size=32, verbose=0)
    logging.info("Model trained successfully.")
else:
    logging.warning("No training data available. Using untrained model.")

@app.route('/predict', methods=['POST'])
def predict():
    try:
        data = request.get_json()
        history = data.get('history', [])
        if len(history) != 10:
            return jsonify({'error': 'Please provide exactly 10 results.'}), 400

        # Preprocess input
        input_data = le.fit_transform(history)
        input_data = np.array([input_data])

        # Make prediction
        probability = model.predict(input_data, verbose=0)[0][0]
        prediction = 'Dragon' if probability > 0.5 else 'Tiger'
        probability = probability if prediction == 'Dragon' else 1 - probability

        return jsonify({
            'prediction': prediction,
            'probability': float(probability)
        })
    except Exception as e:
        logging.error(f"Prediction error: {str(e)}")
        return jsonify({'error': str(e)}), 500

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)
```

**requirements.txt**
```txt
flask==2.0.1
tensorflow==2.14.0
numpy==1.25.2
scikit-learn==1.4.2
```

**README.md**
```markdown
# Dragon vs Tiger Prediction System

A real-time prediction system for the Dragon vs Tiger card game, built with Flask, TensorFlow, and HTML, deployable on an Android server.

## Prerequisites
- Python 3.8+ installed on the Android device (e.g., via Termux or a cloud server)
- Android device with internet access and a browser
- Termux or a similar terminal emulator for Android

## Setup Instructions
1. **Install Termux** on your Android device from the Play Store or F-Droid.
2. **Install Python** in Termux:
   ```bash
   pkg install python
   ```
3. **Install pip** and dependencies:
   ```bash
   pip install --upgrade pip
   pip install -r requirements.txt
   ```
4. **Place Files**:
   - Copy `index.html`, `app.py`, and `requirements.txt` to a directory in Termux (e.g., `/data/data/com.termux/files/home/dvt_prediction`).
5. **Run the Server**:
   ```bash
   python app.py
   ```
6. **Access the App**:
   - Open a browser on your Android device and navigate to `http://localhost:5000`.
   - Enter the last 10 game results (e.g., `D,T,D,D,T,D,T,D,T,D`) and click "Predict".

## Notes
- **Training Data**: Replace the placeholder data in `app.py` with real historical game data for better accuracy.
- **Accuracy**: The game is luck-based, and achieving 90% accuracy is not guaranteed. The model provides probabilistic predictions based on patterns.
- **Server**: For continuous operation, consider deploying on a cloud server (e.g., Heroku, AWS) accessible from your Android device.
- **Security**: Ensure the server is secure if exposed publicly (e.g., use HTTPS, authentication).

## Troubleshooting
- If TensorFlow fails to install, ensure your Python version is compatible (3.8 or 3.9 recommended).
- For errors, check the logs in the Termux console.
```